
The ``0-add_integer.py`` module
======================

Using ``add_integer``
-------------------

This is an example text file in reStructuredText format.  First import
``add_integer`` from the ``add_integer`` module:

    >>> add_integer = __import__("0-add_integer").add_integer

Now use it:

    >>> add_integer(3, 9)
    12

    >>> add_integer(-3, -9)
    -12

    >>> add_integer(-3.67, -913)
    -916

    >>> add_integer((4 * 5), 4)
    24

    >>> add_integer(-3, )
    95

    >>> add_integer([7])
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer('a', 9)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(4, 'y')
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer(False, 'y')
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer('str', 'y')
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> add_integer(, 4)
    Traceback (most recent call last):
    ...
    SyntaxError: invalid syntax

    >>> add_integer(True)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(5, 8, 9)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

    #CHECK FOR PEP8 STYLE
    >>> import os
    >>> os.popen("pep8 0-add_integer.py").read()
    ''

    #CHECK FOR COMMENTS LENGHT OF THE SHEBANG
    >>> comments = __import__("0-add_integer").__doc__
    >>> len(comments) > 4
    True

    #CHECK FOR FUNCTION COMMENTS LENGHT
    >>> comments = __import__("0-add_integer").add_integer.__doc__
    >>> len(comments) > 2
    True

    #CHECK IF README FILE EXISTS
    >>> import os
    >>> is_readme = os.getcwd() + '/README.md'
    >>> os.path.exists(is_readme)
    True

    # CHECK IF FILE IS EXCECUTABLE
    >>> import os
    >>> path_file = os.getcwd() + '/0-add_integer.py'
    >>> os.access(path_file, os.X_OK)
    True

    #CHECK FOR SHEBANG
    >>> with open("0-add_integer.py", "r") as file:
    ...     first_line = file.readline()
    ...
    >>> first_line == '#!/usr/bin/python3\n'
    True

    #CHECK FOR EMPTY LAST LINE
    >>> with open("0-add_integer.py", "r") as file:
    ...     for last_line in file:
    ...             pass
    ...
    >>> last_line [-1] == '\n'
    True

    #CHECK IF README IS NOT EMPTY
    >>> import os
    >>> is_readme = os.getcwd() + '/README.md'
    >>> os.stat(is_readme).st_size == 0
    False